/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.cams.cams;

import com.cams.cams.ServerFrames.ServerConfig;
import com.cams.cams.ServerFrames.ServerConfig1;
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Properties;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

import javax.swing.JOptionPane;
import javax.swing.UIManager;

/**
 *
 * @author hs475
 */
public class CAMS_start_page_client extends javax.swing.JFrame {

    //static String domain="192.168.0.107:";
    //static String domain = "localhost";
    static String domain;

    static String userDatabase;
    static String userPassword;

    static String port;
    static String stopMsg = "";
    String class_name_get = "";

    /**
     * Creates new form CAMS_start_page_client
     */
    public CAMS_start_page_client() throws IOException {
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream("config.properties"));

            domain = prop.getProperty("domain");
            userDatabase = prop.getProperty("userDatabase");
            userPassword = prop.getProperty("userPassword");
            port = prop.getProperty("port");

        } catch (FileNotFoundException ex) {
            Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setIconImage(new ImageIcon(this.getClass().getResource("/Images/cams.png")).getImage());
        initComponents();
        deptBoxload();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        subjectbox = new javax.swing.JComboBox<>();
        deptbox = new javax.swing.JComboBox<>();
        stopButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        classbox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        onoff = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        user_id = new javax.swing.JTextField();
        startButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        user_passwd = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        labbox = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        serverConfig = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CAMS");
        setBackground(new java.awt.Color(51, 51, 51));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.setFocusable(false);

        subjectbox.setBackground(new java.awt.Color(51, 51, 51));
        subjectbox.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        subjectbox.setForeground(new java.awt.Color(204, 204, 204));
        subjectbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectboxActionPerformed(evt);
            }
        });

        deptbox.setBackground(new java.awt.Color(51, 51, 51));
        deptbox.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        deptbox.setForeground(new java.awt.Color(204, 204, 204));
        deptbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deptboxActionPerformed(evt);
            }
        });

        stopButton.setBackground(new java.awt.Color(102, 102, 102));
        stopButton.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        stopButton.setForeground(new java.awt.Color(204, 204, 204));
        stopButton.setText("Stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        jLabel8.setBackground(new java.awt.Color(204, 204, 204));
        jLabel8.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/math-folder.png"))); // NOI18N
        jLabel8.setText("SUBJECT:");

        classbox.setBackground(new java.awt.Color(51, 51, 51));
        classbox.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        classbox.setForeground(new java.awt.Color(204, 204, 204));
        classbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classboxActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setText("Status:");

        onoff.setBackground(new java.awt.Color(204, 204, 204));
        onoff.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        onoff.setForeground(new java.awt.Color(255, 0, 0));
        onoff.setText("OFF");

        jLabel7.setBackground(new java.awt.Color(204, 204, 204));
        jLabel7.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/mac-mini.png"))); // NOI18N
        jLabel7.setText("LAB NUMBER:");

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 28)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 0, 0));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/cams.png"))); // NOI18N
        jLabel3.setText("Computer Active Monitoring System");

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/id.png"))); // NOI18N
        jLabel1.setText("ID :");
        jLabel1.setMaximumSize(new java.awt.Dimension(160, 100));
        jLabel1.setName(""); // NOI18N

        user_id.setBackground(new java.awt.Color(51, 51, 51));
        user_id.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        user_id.setForeground(new java.awt.Color(204, 204, 204));
        user_id.setMaximumSize(new java.awt.Dimension(150, 150));

        startButton.setBackground(new java.awt.Color(102, 102, 102));
        startButton.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        startButton.setForeground(new java.awt.Color(204, 204, 204));
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(204, 204, 204));
        jLabel6.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/department-store.png"))); // NOI18N
        jLabel6.setText("DEPARTMENT:");

        user_passwd.setBackground(new java.awt.Color(51, 51, 51));
        user_passwd.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        user_passwd.setForeground(new java.awt.Color(204, 204, 204));

        jLabel5.setBackground(new java.awt.Color(204, 204, 204));
        jLabel5.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/locked.png"))); // NOI18N
        jLabel5.setText("PASSWORD :");

        labbox.setBackground(new java.awt.Color(51, 51, 51));
        labbox.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        labbox.setForeground(new java.awt.Color(204, 204, 204));
        labbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                labboxActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(204, 204, 204));
        jLabel9.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/class.png"))); // NOI18N
        jLabel9.setText("CLASS NAME:");

        refreshButton.setBackground(new java.awt.Color(102, 102, 102));
        refreshButton.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        refreshButton.setForeground(new java.awt.Color(204, 204, 204));
        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        serverConfig.setBackground(new java.awt.Color(102, 102, 102));
        serverConfig.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        serverConfig.setForeground(new java.awt.Color(204, 204, 204));
        serverConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fourty/server.png"))); // NOI18N
        serverConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serverConfigActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(24, 24, 24))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addComponent(jLabel8))
                            .addComponent(jLabel9))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deptbox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(user_id, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classbox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subjectbox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labbox, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(user_passwd, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(refreshButton))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(onoff))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(173, 173, 173)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serverConfig)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel3)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(user_id, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(user_passwd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(deptbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(134, 134, 134)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(classbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(subjectbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(labbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(serverConfig, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(stopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(onoff))
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jLabel4))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        deptbox.removeAllItems();
        subjectbox.removeAllItems();
        labbox.removeAllItems();
        deptBoxload();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void labboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_labboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_labboxActionPerformed
    public static byte[] getSHA(String input) throws NoSuchAlgorithmException{
		MessageDigest md = MessageDigest.getInstance("SHA-256");
		return md.digest(input.getBytes(StandardCharsets.UTF_8));
	}
	
	public static String toHexString(byte[] hash)
	{
		BigInteger number = new BigInteger(1, hash);
		StringBuilder hexString = new StringBuilder(number.toString(16));
		while (hexString.length() < 64)
		{
			hexString.insert(0, '0');
        }
		return hexString.toString();
	}
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        stopMsg = "";
        try {
            // TODO add your handling code here:
            var id = user_id.getText();
            var passwd = user_passwd.getText();
            passwd=toHexString(getSHA(passwd));
            final String starttime;
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("select * from login_client where login_id='" + id + "' and passwd='" + passwd + "'");
            //
            //LocalTime time=LocalTime.now();
            //DateTimeFormatter formatter=DateTimeFormatter.ofPattern("HH:mm:ss");
            //starttime = time.format(formatter);
            //
            if (rs.next()) {
                class_name_get = rs.getString("degree_name");
                //JOptionPane.showMessageDialog(null,"your id is "+id+"\npassword is "+passwd);
                //JOptionPane.showMessageDialog(rootPane,"Monitoring started");

                user_id.disable();
                startButton.disable();
                user_passwd.disable();
                refreshButton.setEnabled(false);
                subjectbox.disable();
                labbox.disable();
                deptbox.disable();
                classbox.disable();
                //refreshButton.setEnabled(false);

                ResultSet dept_name1 = stmt.executeQuery("select dept_name,name from login_client where login_id='" + id + "'");
                dept_name1.next();
                String dept_name = dept_name1.getString(1);
                String name = dept_name1.getString(2);
                JOptionPane.showMessageDialog(rootPane, "Welcome " + name + "\nMonitoring started");

                LocalTime time = LocalTime.now();
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
                starttime = time.format(formatter);
                String subject_name = subjectbox.getSelectedItem().toString();
                String labnumber = labbox.getSelectedItem().toString();
                String classname = classbox.getSelectedItem().toString();

                Runnable heartbeat = new Runnable() {
                    @Override
                    public void run() {
                        if (stopMsg != "stop") {
                            sendHeartBeat(id, dept_name, stmt, starttime, subject_name, labnumber, classname);
                        }
                    }

                };
                ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
                executor.scheduleAtFixedRate(heartbeat, 0, 3, TimeUnit.SECONDS);

                //sendHeartBeat(id,dept_name,stmt,starttime);
                user_id.setText("");
                user_passwd.setText("");

            } else {

                JOptionPane.showMessageDialog(rootPane, "Wrong Credentials");
            }
        } catch (Exception ex) {
            onoff.setText("OFF");
            onoff.setForeground(Color.red);
            user_id.enable();
            startButton.enable();
            user_passwd.enable();
            refreshButton.setEnabled(true);
            subjectbox.enable();
            labbox.enable();
            deptbox.enable();
            classbox.enable();
            //refreshButton.setEnabled(true);
            JOptionPane.showMessageDialog(rootPane, ex);
        }

    }//GEN-LAST:event_startButtonActionPerformed

    private void classboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classboxActionPerformed
        // TODO add your handling code here:
        subjectBoxLoad();
    }//GEN-LAST:event_classboxActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // TODO add your handling code here:
        onoff.setText("OFF");
        onoff.setForeground(Color.red);
        user_id.enable();
        startButton.enable();
        user_passwd.enable();
        refreshButton.setEnabled(true);
        subjectbox.enable();
        labbox.enable();
        deptbox.enable();
        classbox.enable();
        user_id.setText("");
        user_passwd.setText("");

        stopMsg = "stop";
        System.exit(0);
        //return;
    }//GEN-LAST:event_stopButtonActionPerformed

    private void deptboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deptboxActionPerformed

        classbox.removeAllItems();
        subjectbox.removeAllItems();
        labbox.removeAllItems();
        classBoxLoad();
    }//GEN-LAST:event_deptboxActionPerformed

    private void subjectboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectboxActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            lab_number_load();
        } catch (SQLException ex) {
            Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_subjectboxActionPerformed

    private void serverConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serverConfigActionPerformed
        // TODO add your handling code here:
        new ServerConfig1().show();
    }//GEN-LAST:event_serverConfigActionPerformed

    /**
     * Returns an ImageIcon, or null if the path was invalid.
     */
    protected ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = getClass().getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws FileNotFoundException, IOException {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CAMS_start_page_client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new CAMS_start_page_client().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> classbox;
    private javax.swing.JComboBox<String> deptbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> labbox;
    private javax.swing.JLabel onoff;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton serverConfig;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JComboBox<String> subjectbox;
    private javax.swing.JTextField user_id;
    private javax.swing.JTextField user_passwd;
    // End of variables declaration//GEN-END:variables

    private void sendHeartBeat(String id, String dept_name, Statement stmt, String starttime, String subject_name, String labnumber, String classname) {
        try {
            LocalDate date = LocalDate.now();
            LocalTime time = LocalTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm:ss");
            //starttime = time.format(formatter);
            String endtime = time.format(formatter);
            //System.out.println("endtime:"+endtime);

            //fetch starttime
            ResultSet starttime_server1 = stmt.executeQuery("select start_time from subjects where lab_number=" + labnumber);
            starttime_server1.next();
            String starttime_server = starttime_server1.getString("start_time");
            //System.out.println("OUTPUT1:"+starttime_server);

            //fetch totaltime in minutes
            ResultSet totaltime_server1 = stmt.executeQuery("select total_time from subjects where lab_number=" + labnumber);
            totaltime_server1.next();
            int totaltime_server = totaltime_server1.getInt("total_time");
            //System.out.println("OUTPUT2:"+totaltime_server);

            //add starttime and totaltime 
            String[] arrayTimeend_server = starttime_server.split(":");
            while (totaltime_server > 1) {
                if (Integer.parseInt(arrayTimeend_server[1]) < totaltime_server) {
                    arrayTimeend_server[0] = Integer.parseInt(arrayTimeend_server[0]) + 1 + "";
                    totaltime_server -= 60;
                } else {
                    arrayTimeend_server[1] += totaltime_server;
                    totaltime_server = 0;
                }
            }
            String[] arrayTimestart = starttime_server.split(":");

            //check if current time is in between time
            String[] arrayTimeEndTime_client = endtime.split(":");
            //start time for server variable:arrayTimestart
            //end time for calculated variable :arrayTimeend_server
            //current time for  variable:arrayTimeEndTime_client
            Boolean proceed = false;
            
            System.out.println(Integer.parseInt(arrayTimestart[0]));
            System.out.println(Integer.parseInt(arrayTimestart[1]));
            System.out.println(Integer.parseInt(arrayTimestart[2]));
            
            System.out.println(Integer.parseInt(arrayTimeEndTime_client[0]));
            //agar server ka start time is less than client ka start time && client ka start time is less than server ka end time
            if ((Integer.parseInt(arrayTimestart[0]) < Integer.parseInt(arrayTimeEndTime_client[0])) && (Integer.parseInt(arrayTimeEndTime_client[0]) < Integer.parseInt(arrayTimeend_server[0]))) {

                proceed = true;
                System.out.println("update");
            } //agar server ka start time same hai client ke start time OR client ka end time same hai sevrer ke end time se
            else if ((Integer.parseInt(arrayTimestart[0]) == Integer.parseInt(arrayTimeEndTime_client[0])) || (Integer.parseInt(arrayTimeEndTime_client[0]) == Integer.parseInt(arrayTimeend_server[0]))) {
                System.out.println("under elseif");
                //agar server ka start time same hai client ke end time se 
                if (Integer.parseInt(arrayTimestart[0]) == Integer.parseInt(arrayTimeEndTime_client[0])) {
                    System.out.println("Restart");

                    System.out.println(arrayTimeEndTime_client[1]);
                    System.out.println(arrayTimeend_server[1]);
                    //agar client ka end time ka minute greater hai server ke end time ke minute se 
                    if (Integer.parseInt(arrayTimeEndTime_client[1]) > Integer.parseInt(arrayTimeend_server[1])) {//this line could result in error if error occured change the opposite operator// im bit confused here
                        proceed = true;
                        System.out.println("update");
                    } else {
                        proceed = false;
                    }

                } //server ka end time hour same hai client ke end time se hour
                else if (Integer.parseInt(arrayTimeend_server[0]) == Integer.parseInt(arrayTimeEndTime_client[0])) {
                    //client ka end time ka minute server ke end time ke minute se kam hai to true else false
                    if (Integer.parseInt(arrayTimeEndTime_client[1]) < Integer.parseInt(arrayTimeend_server[1])) {
                        proceed = true;

                        System.out.println("update");
                    }
                }
            } else {
                proceed = false;
                System.out.println("No update");
            }
            //if yes then run else continue
            System.out.println(proceed);
            //System.out.println("a:"+arrayTimestart[0]);
            //System.out.println("b:"+arrayTimeEndTime_client[0]);
            //System.out.println("c:"+arrayTimeend_server[0]);
            //System.out.println("d:"+arrayTimeEndTime_client[1]);
            //System.out.println("e:"+arrayTimeend_server[1]);
            ResultSet s = stmt.executeQuery("select * from attendance where login_id='" + id + "' and lab_number=" + labnumber);

            //ResultSet test=stmt.executeQuery("select * from subjects");
            //test.next();
            if (s.next()) {

                if (proceed == true) {
                    //UPDATE `attendance` SET `login_id`='[value-1]',`dept_name`='[value-2]',`start_time`='[value-3]',`end_time`='[value-4]',`date`='[value-5]' WHERE 1

                    //stmt.executeUpdate("UPDATE `attendance` SET `end_time`='"+endtime+"' WHERE login_id='"+id+"' AND date='"+date+"' AND subject_name='"+subject_name+"' AND start_time='"+starttime+"' AND lab_number='"+labnumber+"'");
                    stmt.executeUpdate("UPDATE `attendance` SET `end_time`='" + endtime + "' WHERE login_id='" + id + "' AND lab_number=" + labnumber);
                    System.out.print("heartbeat sent1\n");
                    //stmt.executeUpdate("UPDATE `attendance` SET `end_time`='"+endtime+"' WHERE login_id='"+id+"' AND date='"+date+"' AND subject_name='"+subject_name+"'");
                }
            } else {
                String lab_number = labbox.getSelectedItem().toString();
                //System.out.println("This 1");
                stmt.executeUpdate("insert into `attendance` (`login_id`, `dept_name`, `start_time`, `end_time`, `date`, `subject_name`,`lab_number`,`class_name`) VALUES ('"
                        + id + "','" + dept_name + "','" + starttime + "','" + endtime + "','" + date + "','" + subject_name + "','" + lab_number + "','" + classname + "')");
                System.out.print("heartbeat sent2\n");
                //System.out.println("This 2");
            }//this means there is no input in attendance 
            onoff.setText("ON");
            onoff.setForeground(Color.green);
            //System.out.print("heartbeat sent\n");
        } catch (SQLException ex) {
            //JOptionPane.showMessageDialog(rootPane, "Server Error!");
            Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void deptBoxload() {

        //static String domain="192.168.0.107:";
        //static String domain = "localhost";
        try {

            deptbox.removeAllItems();
            classbox.removeAllItems();
            subjectbox.removeAllItems();
            labbox.removeAllItems();
            System.out.println("Connection Established");
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);

            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery("select distinct dept_name from subjects");
            while (rs.next()) {
                deptbox.addItem(rs.getString("dept_name"));

            }
            //System.out.println("This worked");
            classBoxLoad();
            //subjectBoxLoad();
            //System.out.println("This worked2");
        } catch (Exception ex) {
            //JOptionPane.showMessageDialog(rootPane, "Server is not ON");
            System.out.println("unable to load1");
        }
        //subjectBoxLoad();
    }

    private void subjectBoxLoad() {
        try {

            subjectbox.removeAllItems();
            labbox.removeAllItems();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = con.createStatement();
            String class_name = classbox.getSelectedItem().toString();
            //System.out.println(class_box);
            ResultSet sn = stmt.executeQuery("select distinct subject_name from subjects where class_name='" + class_name + "'");

            while (sn.next()) {
                subjectbox.addItem(sn.getString("subject_name"));
            }
            lab_number_load();
        } catch (Exception ex) {
            //JOptionPane.showMessageDialog(rootPane, "Server is not ON");
            System.out.println("unable to load1");
        }
    }

    private void lab_number_load() throws SQLException, ClassNotFoundException {
        try {
            labbox.removeAllItems();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = con.createStatement();
            String subject_name = subjectbox.getSelectedItem().toString();
            //System.out.println(subject_name);
            ResultSet ls = stmt.executeQuery("select * from subjects where subject_name='" + subject_name + "'");
            //ResultSet ls=stmt.executeQuery("select * from subjects");
            //System.out.println("this run1");

            //String lastitem="";
            ArrayList<Integer> subjectItem = new ArrayList<>();

            while (ls.next()) {
                //System.out.println(ls.getString("lab_number"));
                //lastitem=ls.getString("lab_number");
                //labbox.addItem(ls.getString("lab_number"));
                subjectItem.add(ls.getInt("lab_number"));

            }
            Collections.sort(subjectItem, Collections.reverseOrder());
            for (int i = 0; i < subjectItem.size(); i++) {
                labbox.addItem(subjectItem.get(i) + "");
            }
            //labbox.insertItemAt(lastitem, 0);

        } catch (Exception ex) {
            //JOptionPane.showMessageDialog(rootPane, "Server is not ON");
            System.out.println("unable to load2");
        }
    }

    private void classBoxLoad() {
        try {
            classbox.removeAllItems();
            subjectbox.removeAllItems();
            labbox.removeAllItems();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = con.createStatement();
            String dept_name = deptbox.getSelectedItem().toString();
            //System.out.println(dept_name);
            ResultSet sn = stmt.executeQuery("select distinct class_name from subjects where dept_name='" + dept_name + "'");

            while (sn.next()) {
                classbox.addItem(sn.getString("class_name"));
            }
            subjectBoxLoad();
        } catch (Exception ex) {
            //JOptionPane.showMessageDialog(rootPane, "Server is not ON");
            System.out.println("unable to load1");
        }
    }
}