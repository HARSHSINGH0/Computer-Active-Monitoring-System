/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.cams.cams.ServerFrames.attendance;

import com.cams.cams.CAMS_start_page_client; 
import com.formdev.flatlaf.FlatDarculaLaf;
import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Dimension;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.temporal.*;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.SpinnerDateModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author hs475
 */
public class ClassWiseAttendance extends javax.swing.JFrame {

    static String domain;

    static String userDatabase;
    static String userPassword;

    static String port;
    static String stopMsg = "";
    String query = "";
    String labcount;
    //String totalTime;
    /**
     * Creates new form ClassWiseAttendance
     */
    public ClassWiseAttendance() {
        Properties prop = new Properties();
        try {
            prop.load(new FileInputStream("config.properties"));
            
            domain=prop.getProperty("domain");
            userDatabase = prop.getProperty("userDatabase");
            userPassword=prop.getProperty("userPassword");
            port=prop.getProperty("port");
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CAMS_start_page_client.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
        this.setIconImage(new ImageIcon(this.getClass().getResource("/Images/cams.png")).getImage());
        initStuff();
        loadFromDatabase();
        loadTable();

        startDateSpinner.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                loadWithSpinner();

            }
        });
        endDateSpinner.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent e) {
                loadWithSpinner();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        deptCombo1 = new javax.swing.JComboBox<>();
        classCombo = new javax.swing.JComboBox<>();
        durationCombo = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Date date1= new Date();
        SpinnerDateModel sm1 =new SpinnerDateModel (date1, null, null, Calendar.DAY_OF_YEAR);
        startDateSpinner = new javax.swing.JSpinner(sm1);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        Date date2= new Date();
        SpinnerDateModel sm2 =new SpinnerDateModel (date2, null, null, Calendar.DAY_OF_YEAR);
        endDateSpinner = new javax.swing.JSpinner(sm2);
        startDateTf = new javax.swing.JLabel();
        endDateTf = new javax.swing.JLabel();
        exportBt = new javax.swing.JButton();
        countLabs1 = new javax.swing.JLabel();
        countLabs = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CAMS");
        setBackground(new java.awt.Color(51, 51, 51));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setForeground(new java.awt.Color(51, 51, 51));

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Check Attendance");

        deptCombo1.setBackground(new java.awt.Color(51, 51, 51));
        deptCombo1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        deptCombo1.setForeground(new java.awt.Color(204, 204, 204));
        deptCombo1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deptCombo1ActionPerformed(evt);
            }
        });

        classCombo.setBackground(new java.awt.Color(51, 51, 51));
        classCombo.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        classCombo.setForeground(new java.awt.Color(204, 204, 204));
        classCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classComboActionPerformed(evt);
            }
        });

        durationCombo.setBackground(new java.awt.Color(51, 51, 51));
        durationCombo.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        durationCombo.setForeground(new java.awt.Color(204, 204, 204));
        durationCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Time", "Yearly", "Monthly", "Today", "Custom Date" }));
        durationCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                durationComboActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(204, 204, 204));
        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/twenty/duration.png"))); // NOI18N
        jLabel2.setText("Duration");

        jLabel3.setBackground(new java.awt.Color(204, 204, 204));
        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/twenty/department-store.png"))); // NOI18N
        jLabel3.setText("Department");

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/twenty/class.png"))); // NOI18N
        jLabel4.setText("Class");

        JSpinner.DateEditor de1 = new JSpinner. DateEditor (startDateSpinner, "dd:MM:yyyy");
        startDateSpinner.setEditor(de1);
        startDateSpinner.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        startDateSpinner.setToolTipText("");

        jTable1 = new javax.swing.JTable(){

            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        jTable1.setBackground(new java.awt.Color(51, 51, 51));
        jTable1.setFont(new java.awt.Font("Monospaced", 1, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(204, 204, 204));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Login ID", "Department", "Class", "Start Time", "End Time", "Date", "Subject", "Lab Number", "Total Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setGridColor(new java.awt.Color(102, 102, 102));
        jTable1.setSelectionForeground(new java.awt.Color(51, 51, 51));
        jTable1.setShowGrid(true);
        jScrollPane1.setViewportView(jTable1);

        JSpinner.DateEditor de2 = new JSpinner. DateEditor (endDateSpinner, "dd:MM:yyyy");
        endDateSpinner.setEditor(de2);
        endDateSpinner.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        endDateSpinner.setToolTipText("");

        startDateTf.setBackground(new java.awt.Color(204, 204, 204));
        startDateTf.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        startDateTf.setForeground(new java.awt.Color(204, 204, 204));
        startDateTf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/twenty/alarm-clock.png"))); // NOI18N
        startDateTf.setText("Start date");

        endDateTf.setBackground(new java.awt.Color(204, 204, 204));
        endDateTf.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        endDateTf.setForeground(new java.awt.Color(204, 204, 204));
        endDateTf.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/twenty/alarm-clock.png"))); // NOI18N
        endDateTf.setText("End date");

        exportBt.setBackground(new java.awt.Color(51, 51, 51));
        exportBt.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        exportBt.setForeground(new java.awt.Color(204, 204, 204));
        exportBt.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fourty/excel.png"))); // NOI18N
        exportBt.setText("Export ");
        exportBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtActionPerformed(evt);
            }
        });

        countLabs1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        countLabs1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/fourty/mac-mini.png"))); // NOI18N
        countLabs1.setText("Total Labs Count:");

        countLabs.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        countLabs.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jScrollPane1)
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(countLabs1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(countLabs)
                        .addGap(130, 130, 130)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(startDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startDateTf))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(endDateTf)
                            .addComponent(endDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deptCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(classCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel2)
                                    .addComponent(durationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(30, 30, 30)
                        .addComponent(exportBt, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(247, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deptCombo1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(classCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(durationCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exportBt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(countLabs1)
                        .addComponent(countLabs))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startDateTf)
                            .addComponent(endDateTf))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(startDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endDateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void deptCombo1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deptCombo1ActionPerformed
        // TODO add your handling code here:
        degreeBoxload();
        loadFromDatabase();
        loadTable();
    }//GEN-LAST:event_deptCombo1ActionPerformed

    private void classComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classComboActionPerformed
        // TODO add your handling code here:
        loadFromDatabase();
        loadTable();
    }//GEN-LAST:event_classComboActionPerformed

    private void durationComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_durationComboActionPerformed
        // TODO add your handling code here:
        loadFromDatabase();
        loadTable();
    }//GEN-LAST:event_durationComboActionPerformed

    private void exportBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtActionPerformed
        // TODO add your handling code here:
        FileOutputStream excelFOU = null;
        BufferedOutputStream excelBOU = null;
        XSSFWorkbook excelJTableExporter = null;

        JFileChooser excelFileChooser = new JFileChooser("C:\\Users\\hs475\\Desktop");
        excelFileChooser.setDialogTitle("Save as");
        FileNameExtensionFilter fnef = new FileNameExtensionFilter("Excel files", "xls", "xlsx", "xlsm");
        excelFileChooser.setFileFilter(fnef);
        int excelChooser = excelFileChooser.showSaveDialog(null);
        if (excelChooser == JFileChooser.APPROVE_OPTION) {

            try {
                //import poi library
                excelJTableExporter = new XSSFWorkbook();
                XSSFSheet excelsheet = excelJTableExporter.createSheet("JTable Sheet");
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    XSSFRow excelRow = excelsheet.createRow(i);
                    for (int j = 0; j < jTable1.getColumnCount(); j++) {
                        XSSFCell excelCell = excelRow.createCell(j);
                        excelCell.setCellValue(jTable1.getValueAt(i, j).toString());
                    }
                }
                excelFOU = new FileOutputStream(excelFileChooser.getSelectedFile() + ".xlsx");
                excelBOU = new BufferedOutputStream(excelFOU);
                excelJTableExporter.write(excelBOU);
                JOptionPane.showMessageDialog(rootPane, "Exported Successfully....");

            } catch (FileNotFoundException ex) {
                ex.printStackTrace();
            } catch (IOException ex) {
                Logger.getLogger(ClassWiseAttendance.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (excelBOU != null) {

                        excelBOU.close();
                    }
                    if (excelFOU != null) {

                        excelFOU.close();
                    }

                    if (excelJTableExporter != null) {

                        excelJTableExporter.close();
                    }
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }

        }


    }//GEN-LAST:event_exportBtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            //for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            //    if ("Nimbus".equals(info.getName())) {
            //        javax.swing.UIManager.setLookAndFeel(info.getClassName());
            //        break;
            //    }
            //}
            UIManager.setLookAndFeel( new FlatDarculaLaf() );
        }catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassWiseAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassWiseAttendance().setVisible(true);
            }
        });
    }

    private void initStuff() {

        try {
            startDateSpinner.setVisible(false);
            endDateSpinner.setVisible(false);
            startDateTf.setVisible(false);
            endDateTf.setVisible(false);

            deptCombo1.removeAllItems();
            classCombo.removeAllItems();
            //subjectCombo.removeAllItems();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = con.createStatement();
            ResultSet sn = stmt.executeQuery("select distinct dept_name from dept ");

            while (sn.next()) {
                deptCombo1.addItem(sn.getString("dept_name"));
            }
            degreeBoxload();
        } catch (Exception ex) {
            //JOptionPane.showMessageDialog(rootPane, "Server is not ON");
            System.out.println("unable to load1");
        }
    }

    private void degreeBoxload() {
        try {

            classCombo.removeAllItems();
            //subjectCombo.removeAllItems();
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = con.createStatement();
            String dept_name = deptCombo1.getSelectedItem().toString();

            ResultSet sn = stmt.executeQuery("select distinct class_name from dept where dept_name='" + dept_name + "'");

            while (sn.next()) {
                classCombo.addItem(sn.getString("class_name"));
            }

            //subjectBoxload();
        } catch (Exception ex) {
            //JOptionPane.showMessageDialog(rootPane, "Server is not ON");
            System.out.println("unable to load2");
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> classCombo;
    private javax.swing.JLabel countLabs;
    private javax.swing.JLabel countLabs1;
    private javax.swing.JComboBox<String> deptCombo1;
    private javax.swing.JComboBox<String> durationCombo;
    private javax.swing.JSpinner endDateSpinner;
    private javax.swing.JLabel endDateTf;
    private javax.swing.JButton exportBt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JSpinner startDateSpinner;
    private javax.swing.JLabel startDateTf;
    // End of variables declaration//GEN-END:variables

    private void loadFromDatabase() {

        try {
            String dept_name = deptCombo1.getSelectedItem().toString();
            String class_name = classCombo.getSelectedItem().toString();
            int inputDurationItem = durationCombo.getSelectedIndex();
            System.out.println(inputDurationItem);
            if (inputDurationItem == 4) {
                startDateSpinner.setVisible(true);
                endDateSpinner.setVisible(true);
                startDateTf.setVisible(true);
                endDateTf.setVisible(true);
            } else {
                startDateSpinner.setVisible(false);
                endDateSpinner.setVisible(false);
                startDateTf.setVisible(false);
                endDateTf.setVisible(false);

            }

        } catch (Exception ex) {
        }

    }

    private void loadTable() {

        try {

            int rowCount = jTable1.getRowCount();
            //Remove rows one by one from the end of the table
            //for (int i = rowCount; i > 0; i--) {
            //    jTable1.remove(i);
            //}
            jTable1.setModel(new DefaultTableModel(null, new String[]{"Login ID", "Department", "Class", "Start Time", "End Time", "Date", "Subject", "Lab Number","Total Time"}));

            Connection conn;
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = (Statement) con.createStatement();
            String dept_name_Combo = deptCombo1.getSelectedItem().toString();
            String class_name_Combo = classCombo.getSelectedItem().toString();
            String duration_Combo = durationCombo.getSelectedItem().toString();

            //switch cases for every duration
            String startDate;
            switch (duration_Combo) {
                case "All Time":
                    query = "SELECT `login_id`, `dept_name`, `start_time`, `end_time`, `date`, `subject_name`, `lab_number`, `class_name` ,TIMEDIFF(end_time, start_time) AS difference "
                            + "FROM attendance WHERE dept_name LIKE '" + dept_name_Combo + "' AND class_name LIKE '" + class_name_Combo + "'";
                    
                    labcount="Select distinct count(lab_number) from attendance where class_name='"+classCombo.getSelectedItem()+"'";
                    //totalTime="SELECT TIMEDIFF(end_time, start_time) AS difference FROM attendance";

                    break;
                //yearly
                case "Yearly":
                    startDate = java.time.LocalDate.now().minus(365, ChronoUnit.DAYS).toString();
                    query = "SELECT `login_id`, `dept_name`, `start_time`, `end_time`, `date`, `subject_name`, `lab_number`, `class_name` ,TIMEDIFF(end_time, start_time) AS difference "
                            + "FROM `attendance` WHERE `dept_name` LIKE '" + dept_name_Combo + "' AND `class_name` LIKE '" + class_name_Combo + "' AND date>='" + startDate + "'";
                    labcount="Select distinct count(lab_number) from attendance where class_name='"+classCombo.getSelectedItem()+"' AND date>='" + startDate + "'";
                    break;
                //month
                case "Monthly":
                    startDate = java.time.LocalDate.now().minus(30, ChronoUnit.DAYS).toString();
                    query = "SELECT `login_id`, `dept_name`, `start_time`, `end_time`, `date`, `subject_name`, `lab_number`, `class_name` ,TIMEDIFF(end_time, start_time) AS difference "
                            + "FROM `attendance` WHERE `dept_name` LIKE '" + dept_name_Combo + "' AND `class_name` LIKE '" + class_name_Combo + "' AND date>='" + startDate + "'";
                    labcount="Select distinct count(lab_number) from attendance where class_name='"+classCombo.getSelectedItem()+"' AND date>='" + startDate + "'";
                    break;
                //Today 
                case "Today":
                    query = "SELECT `login_id`, `dept_name`, `start_time`, `end_time`, `date`, `subject_name`, `lab_number`, `class_name` ,TIMEDIFF(end_time, start_time) AS difference "
                            + "FROM `attendance` WHERE `dept_name` LIKE '" + dept_name_Combo + "' AND `class_name` LIKE '" + class_name_Combo + "' AND date='" + java.time.LocalDate.now().toString() + "'";
                    labcount="Select distinct count(lab_number) from attendance where class_name='"+classCombo.getSelectedItem()+"' AND date='" + java.time.LocalDate.now().toString() + "'";
                    break;
                //custom date
                case "Custom Date":
                    String starttime1 = startDateSpinner.getValue().toString();
                    //System.out.println(starttime1);
                    //String[] arrOfStr = starttime1.split(" ");
                    //starttime1=arrOfStr[3];
                    //starttime1=starttime1.replace(":", "/");

                    //String endtime1=startDateSpinner.getValue().toString();
                    //System.out.println(endtime1);
                    //String[] arrOfStr2 = endtime1.split(" ");
                    // endtime1=arrOfStr2[3];
                    //endtime1=endtime1.replace(":", "/");
                    query = "SELECT `login_id`, `dept_name`, `start_time`, `end_time`, `date`, `subject_name`, `lab_number`, `class_name` ,TIMEDIFF(end_time, start_time) AS difference "
                            + "FROM `attendance` WHERE `dept_name` LIKE '" + dept_name_Combo + "' AND `class_name` LIKE '" + class_name_Combo + "' AND date='" + java.time.LocalDate.now().toString() + "'";
                    labcount="Select distinct count(lab_number) from attendance where class_name='"+classCombo.getSelectedItem()+"' AND date='" + java.time.LocalDate.now().toString() + "'";

                    //query = "SELECT * FROM `attendance` WHERE `dept_name` LIKE '" + dept_name_Combo + "' AND `class_name` LIKE '" + class_name_Combo + "' AND date>='" + starttime1 + "' AND date<='"+endtime1+"'";
                    //query = "SELECT * FROM `attendance` WHERE `dept_name` LIKE '"+dept_name_Combo+"' AND `class_name` LIKE '"+class_name_Combo+"'";
                    break;

            }
            ResultSet rs1 = stmt.executeQuery(labcount);
            rs1.next();
            labcount=rs1.getString(1);
            countLabs.setText(labcount);
            ResultSet rs = stmt.executeQuery(query);
            
            while (rs.next()) {
                String login_id = rs.getString("login_id");
                String dept_name = rs.getString("dept_name");
                String start_time = rs.getString("start_time");
                String end_time = rs.getString("end_time");
                String date = rs.getString("date");
                String subject_name = rs.getString("subject_name");
                String lab_number = rs.getString("lab_number");
                String class_name = rs.getString("class_name");
                String total_time=rs.getString("difference");

                String[] data = {login_id, dept_name, class_name, start_time, end_time, date, subject_name, lab_number,total_time};
                DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

                tblModel.addRow(data);

            };

        } catch (Exception er) {
            System.err.println(er);
        }
    }

    private void loadWithSpinner() {
        try {
            jTable1.setModel(new DefaultTableModel(null, new String[]{"Login ID", "Department", "Class", "Start Time", "End Time", "Date", "Subject", "Lab Number","Total Time"}));
            Connection conn;
            Connection con = DriverManager.getConnection("jdbc:mysql://" + domain + ":" + port + "/cams", "" + userDatabase, "" + userPassword);
            Statement stmt = (Statement) con.createStatement();
            String dept_name_Combo = deptCombo1.getSelectedItem().toString();
            String class_name_Combo = classCombo.getSelectedItem().toString();
            String duration_Combo = durationCombo.getSelectedItem().toString();
            //System.out.println(new SimpleDateFormat("yyyy/MM/dd").format(startDateSpinner.getValue()));
            String startDateSpinner1 = new SimpleDateFormat("yyyy/MM/dd").format(startDateSpinner.getValue()).toString();
            String endDateSpinner1 = new SimpleDateFormat("yyyy/MM/dd").format(endDateSpinner.getValue()).toString();
            System.out.println(startDateSpinner1);
            
            labcount="Select distinct count(lab_number) from attendance where class_name='"+classCombo.getSelectedItem()+"' AND date between '" + startDateSpinner1 + "' AND '" + endDateSpinner1 + "'";
            ResultSet rs1 = stmt.executeQuery(labcount);
            rs1.next();
            labcount=rs1.getString(1);
            countLabs.setText(labcount);
            
            query = "SELECT `login_id`, `dept_name`, `start_time`, `end_time`, `date`, `subject_name`, `lab_number`, `class_name` ,TIMEDIFF(end_time, start_time) AS difference "
                    + "FROM `attendance` WHERE `dept_name` LIKE '" + dept_name_Combo + "' AND `class_name` LIKE '" + class_name_Combo + "' AND date BETWEEN '" + startDateSpinner1 + "' AND '" + endDateSpinner1 + "'";
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                String login_id = rs.getString("login_id");
                String dept_name = rs.getString("dept_name");
                String start_time = rs.getString("start_time");
                String end_time = rs.getString("end_time");
                String date = rs.getString("date");
                String subject_name = rs.getString("subject_name");
                String lab_number = rs.getString("lab_number");

                String class_name = rs.getString("class_name");
                
                String total_time=rs.getString("difference");
                String[] data = {login_id, dept_name, class_name, start_time, end_time, date, subject_name, lab_number,total_time};
                DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

                tblModel.addRow(data);

            };
        } catch (Exception ex) {
        }
    }

}
